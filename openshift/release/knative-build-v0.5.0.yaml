---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: build-controller-admin
subjects:
  - kind: ServiceAccount
    name: build-controller
    namespace: knative-build
roleRef:
  kind: ClusterRole
  name: knative-build-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-logging
  namespace: knative-build
data:
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "sampling": {
        "initial": 100,
        "thereafter": 100
      },
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
  loglevel.controller: "info"
  loglevel.webhook: "info"
  loglevel.creds-init: "info"
  loglevel.git-init: "info"
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: buildtemplates.build.knative.dev
  labels:
    knative.dev/crd-install: "true"
spec:
  group: build.knative.dev
  version: v1alpha1
  names:
    kind: BuildTemplate
    plural: buildtemplates
    categories:
    - all
    - knative
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
  - name: Age
    type: date
    JSONPath: .metadata.creationTimestamp
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: builds.build.knative.dev
  labels:
    knative.dev/crd-install: "true"
spec:
  group: build.knative.dev
  version: v1alpha1
  names:
    kind: Build
    plural: builds
    categories:
    - all
    - knative
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
  - name: Succeeded
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Succeeded\")].status"
  - name: Reason
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Succeeded\")].reason"
  - name: StartTime
    type: date
    JSONPath: .status.startTime
  - name: CompletionTime
    type: date
    JSONPath: .status.completionTime
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: build-webhook
  namespace: knative-build
spec:
  replicas: 1
  selector:
    matchLabels:
      app: build-webhook
  template:
    metadata:
      labels:
        app: build-webhook
        role: build-webhook
    spec:
      serviceAccountName: build-controller
      containers:
      - name: build-webhook
        image: quay.io/openshift-knative/knative-build-webhook:v0.5.0
        args: [
          "-logtostderr",
          "-stderrthreshold", "INFO",
        ]
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-logging
          mountPath: /etc/config-logging
        resources:
          limits:
            memory: 1000Mi
      volumes:
        - name: config-logging
          configMap:
            name: config-logging
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: build-controller
  name: build-controller
  namespace: knative-build
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: build-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: build-webhook
  name: build-webhook
  namespace: knative-build
spec:
  ports:
    - port: 443
      targetPort: 443
  selector:
    role: build-webhook
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: knative-build
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
  - 'configMap'
  - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: knative-build-admin
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "secrets", "events", "serviceaccounts", "configmaps"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["extensions"]
    resources: ["deployments"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["build.knative.dev"]
    resources: ["builds", "buildtemplates", "clusterbuildtemplates"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["build.knative.dev"]
    resources: ["builds/status", "buildtemplates/status", "clusterbuildtemplates/status"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["caching.internal.knative.dev"]
    resources: ["images"]
    verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    resourceNames: ["knative-build"]
    verbs: ["use"]
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: images.caching.internal.knative.dev
spec:
  group: caching.internal.knative.dev
  version: v1alpha1
  names:
    kind: Image
    plural: images
    singular: image
    categories:
    - all
    - knative-internal
    - caching
    shortNames:
    - img
  scope: Namespaced
  subresources:
    status: {}
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: creds-init
  namespace: knative-build
spec:
  image: quay.io/openshift-knative/knative-build-creds-init:v0.5.0
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: git-init
  namespace: knative-build
spec:
  image: quay.io/openshift-knative/knative-build-git-init:v0.5.0
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: gcs-fetcher
  namespace: knative-build
spec:
  image: gcr.io/cloud-builders/gcs-fetcher
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: nop
  namespace: knative-build
spec:
  image: quay.io/openshift-knative/knative-build-nop:v0.5.0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: build-controller
  namespace: knative-build
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: clusterbuildtemplates.build.knative.dev
  labels:
    knative.dev/crd-install: "true"
spec:
  group: build.knative.dev
  version: v1alpha1
  names:
    kind: ClusterBuildTemplate
    plural: clusterbuildtemplates
    categories:
    - all
    - knative
  scope: Cluster
  subresources:
    status: {}
  additionalPrinterColumns:
  - name: Age
    type: date
    JSONPath: .metadata.creationTimestamp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: build-controller
  namespace: knative-build
spec:
  replicas: 1
  selector:
    matchLabels:
      app: build-controller
  template:
    metadata:
      labels:
        app: build-controller
    spec:
      serviceAccountName: build-controller
      containers:
      - name: build-controller
        image: quay.io/openshift-knative/knative-build-controller:v0.5.0
        args: [
          "-logtostderr",
          "-stderrthreshold", "INFO",
          "-creds-image", "quay.io/openshift-knative/knative-build-creds-init:v0.5.0",
          "-git-image", "quay.io/openshift-knative/knative-build-git-init:v0.5.0",
          "-nop-image", "quay.io/openshift-knative/knative-build-nop:v0.5.0",
        ]
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-logging
          mountPath: /etc/config-logging
        resources:
          limits:
            memory: 1000Mi
      volumes:
        - name: config-logging
          configMap:
            name: config-logging
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-build
